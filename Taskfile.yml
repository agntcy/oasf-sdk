# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

version: '3'

vars:
  BIN_DIR: '{{ .ROOT_DIR }}/bin'
  PROTOC_VERSION: '27.1'
  PROTOC_BIN: '{{ .BIN_DIR }}/protoc-{{.PROTOC_VERSION}}'
  BUFBUILD_VERSION: '1.50.1'
  BUFBUILD_BIN: '{{ .BIN_DIR }}/bufbuild-{{.BUFBUILD_VERSION}}'
  LICENSEI_VERSION: '0.9.0'
  LICENSEI_BIN: '{{ .BIN_DIR }}/licensei-{{.LICENSEI_VERSION}}'
  MULTIMOD_VERSION: '0.17.0'
  MULTIMOD_BIN: '{{ .BIN_DIR }}/multimod-{{.MULTIMOD_VERSION}}'

tasks:
  default:
    cmds:
      - task -l

  fmt:
    desc: Run formatters
    deps:
      - task: deps:protoc
      - task: deps:bufbuild
    dir: ./proto
    cmds:
      - '{{.BUFBUILD_BIN}} dep update'
      - '{{.BUFBUILD_BIN}} format --output ./'

  lint:
    desc: Run linters
    deps:
      - task: deps:protoc
      - task: deps:bufbuild
    dir: ./proto
    cmds:
      - '{{.BUFBUILD_BIN}} dep update'
      - '{{.BUFBUILD_BIN}} format --diff --exit-code'
      - '{{.BUFBUILD_BIN}} lint'

  compile:
    desc: Compile binary for host platform
    dir: ./server
    vars:
      GOOS: '{{ .GOOS | default OS }}'
      GOARCH: '{{ .GOARCH | default ARCH }}'
      BINARY_NAME: '{{ .BINARY_NAME | default "oasf-sdk" }}'
      OUT_BINARY: '{{ .OUT_BINARY | default (printf "%s/%s" .BIN_DIR .BINARY_NAME) }}'
    cmds:
      - CGO_ENABLED=0 GOOS={{ .GOOS }} GOARCH={{ .GOARCH }} BINARY_NAME={{ .BINARY_NAME }} go build -ldflags="-s -w -extldflags -static" -o "{{ .OUT_BINARY }}" cmd/main.go

  compile:all:
    desc: Compile binary for multiple platforms
    cmds:
      - for:
          matrix:
            OS: ['linux', 'darwin', 'windows']
            ARCH: ['amd64', 'arm64']
        cmd: |
          GOOS={{ .ITEM.OS }} GOARCH={{ .ITEM.ARCH }} BINARY_NAME=oasf-sdk-{{ .ITEM.OS }}-{{ .ITEM.ARCH }} BIN_DIR={{ .BIN_DIR }} task compile
  
  build:
    desc: Build image for host platform
    cmds:
      - docker buildx bake --set *.platform=linux/{{ ARCH }}

  build:all:
    desc: Build image for multiple platforms
    cmds:
      - docker buildx bake

  ##
  ## Release
  ##
  release:verify:
    desc: Verify release readiness
    deps:
      - task: deps:multimod-bin
    cmds:
      - '{{ .MULTIMOD_BIN }} verify'

  release:prepare:
    desc: Prepare release
    deps:
      - task: deps:multimod-bin
    cmds:
      - '{{ .MULTIMOD_BIN }} prerelease --all-module-sets --skip-go-mod-tidy=true --commit-to-different-branch=false'

  ##
  ## Test
  ##
  test:e2e:
    desc: Run end-to-end tests
    dir: e2e
    cmds:
      - defer: { task: test:e2e:destroy }
      - go mod tidy
      - go test ./... -v

  test:e2e:setup:
    desc: Setup dependencies for e2e tests
    cmds:
      - |
        docker run -d \
          --name oasf-sdk \
          -p 31234:31234 \
          oasf-sdk

  test:e2e:destroy:
    desc: Destroy dependencies for e2e tests
    cmds:
      - |
        docker stop oasf-sdk
        docker rm oasf-sdk

  ##
  ## License
  ##
  license:
    desc: Check all license compliance (headers and dependencies)
    deps:
      - task: deps:licensei
    cmds:
      - task: license:header
      - task: license:check

  license:header:
    desc: Check license headers in source files
    deps:
      - task: deps:licensei
    cmds:
      - cmd: echo "Checking license headers in source files" && {{ .LICENSEI_BIN }} header --config .licensei.toml

  license:check:
    desc: Check licenses of dependencies
    deps:
      - task: deps:licensei
    cmds:
      - cmd: echo "Checking dependency licenses" && {{ .LICENSEI_BIN }} check --config .licensei.toml

  license:cache:
    desc: Cache licenses of dependencies
    deps:
      - task: deps:licensei
    vars:
      GO_MOD_DIR:
        sh: find . -name go.mod -exec dirname {} \;
    cmds:
      - for: { var: GO_MOD_DIR }
        cmd: echo "Caching licenses in {{.ITEM}}" && cd {{.ITEM}} && {{ .LICENSEI_BIN }} cache --config {{.ROOT_DIR}}/.licensei.toml

  ##
  ## Dependencies
  ##
  deps:tidy:
    desc: Ensure dependencies are up-to-date
    vars:
      GO_MOD_DIR:
        sh: find . -name go.mod -exec dirname {} \;
    cmds:
      - for: { var: GO_MOD_DIR }
        cmd: go -C {{.ITEM}} mod tidy -go={{.GO_VERSION}}

  deps:bin-dir:
    desc: Create bin directory
    internal: true
    run: once
    cmd: mkdir -p {{.BIN_DIR}}
    status:
      - test -d {{.BIN_DIR}}

  deps:protoc:
    desc: Ensure supported Protoc version and plugins are installed
    internal: true
    deps:
      - deps:bin-dir
    preconditions:
      - which go
      - which curl
      - which unzip
    vars:
      ARCH_TYPE: '{{ if eq ARCH "arm64" }}aarch_64{{ else if eq ARCH "amd64" }}x86_64{{else if eq ARCH "s390x"}}x390_64{{ else }}{{ARCH}}{{ end }}'
      OS_VARIANT: '{{ if eq OS "darwin" }}osx-universal_binary{{ else if eq OS "windows" }}win64{{else}}linux-{{.ARCH_TYPE}}{{ end }}'
    cmds:
      - cmd: echo "Downloading Protoc v{{.PROTOC_VERSION}}..."
      - cmd: |
          curl -sL https://github.com/protocolbuffers/protobuf/releases/download/v{{.PROTOC_VERSION}}/protoc-{{.PROTOC_VERSION}}-{{.OS_VARIANT}}.zip -o {{.BIN_DIR}}/tmp.zip
          unzip -j {{.BIN_DIR}}/tmp.zip "bin/protoc" -d {{.BIN_DIR}}
          mv {{.BIN_DIR}}/protoc {{.PROTOC_BIN}}
          rm {{.BIN_DIR}}/tmp.zip
      - cmd: chmod +x {{.PROTOC_BIN}}
      - cmd: echo "Downloading go plugins for protoc..."
      - cmd: go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
      - cmd: go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      - cmd: go install github.com/NathanBaulch/protoc-gen-cobra@latest
    status:
      - test -x {{.PROTOC_BIN}}

  deps:bufbuild:
    desc: Ensure supported bufbuild version is installed
    internal: true
    deps:
      - deps:bin-dir
    preconditions:
      - which curl
    vars:
      ARCH_TYPE: '{{ if eq ARCH "amd64" }}x86_64{{ else }}{{ARCH}}{{ end }}'
    cmds:
      - cmd: echo "Downloading BufBuild v{{.BUFBUILD_VERSION}}..."
      - cmd: |
          curl -L "https://github.com/bufbuild/buf/releases/download/v{{.BUFBUILD_VERSION}}/buf-{{OS}}-{{.ARCH_TYPE}}" -o {{.BUFBUILD_BIN}}
      - cmd: chmod +x {{.BUFBUILD_BIN}}
    status:
      - test -x {{.BUFBUILD_BIN}}

  deps:licensei:
    desc: Install licensei
    internal: true
    deps:
      - deps:bin-dir
    cmds:
      - curl -sfL https://raw.githubusercontent.com/goph/licensei/master/install.sh | bash -s v{{.LICENSEI_VERSION}}
      - mv {{.BIN_DIR}}/licensei {{.LICENSEI_BIN}}
      - chmod +x {{.LICENSEI_BIN}}
    status:
      - test -x {{.LICENSEI_BIN}}

  deps:multimod-bin:
    desc: Build the multimod binary
    internal: true
    deps:
      - deps:bin-dir
    vars:
      MULTIMOD_REPO_DIR: '{{ .BIN_DIR }}/opentelemetry-go-build-tools'
    cmds:
      - git clone https://github.com/open-telemetry/opentelemetry-go-build-tools --branch multimod/v{{.MULTIMOD_VERSION}} {{.MULTIMOD_REPO_DIR}}
      - go build -C {{.MULTIMOD_REPO_DIR}}/multimod -o {{.MULTIMOD_BIN}} main.go
      - rm -rf {{.MULTIMOD_REPO_DIR}}
    status:
      - test -x {{.MULTIMOD_BIN}}